services:
  web:
    build:
      context: ./backend
      dockerfile: backend.Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - staticfiles:/app/staticfiles
    env_file:
      - .env
    command: >
      sh -c "poetry run python manage.py collectstatic --noinput && 
             poetry run gunicorn config.wsgi:application --bind 0.0.0.0:8000 
             --workers 3 
             --timeout 120 
             --access-logfile - 
             --error-logfile -"
    networks:
    - app_net


  db:
    image: postgres:latest
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
    - app_net

# Serviço que deveria buildar o projeto flutter e disponibilizá-lo para o nginx
  # frontend:
  #   build:
  #     context: ./frontend
  #     dockerfile: frontend.Dockerfile
  #   volumes:
  #     - frontend_build:/app/build/web
  #   networks:
  #   - app_net
  
  nginx:
    image: nginx:alpine
    container_name: nginx_proxy
    ports:
      - "80:80"
    volumes:
      - staticfiles:/static
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./frontend/build/web:/usr/share/nginx/html
    depends_on:
      - web
      # - frontend
    networks:
    - app_net

volumes:
  pgdata:
  staticfiles:
  frontend_build: 

networks:
  app_net:
    driver: bridge
